filter {
  if [logtype] == "brohttp" {
    grok {
      patterns_dir => ["/etc/logstash/patterns"]
      match => { "message" => "%{LOG_HEADER}" }
    }
    if [bro_message] {
      grok {
        patterns_dir => ["/etc/logstash/patterns"]
        match => { "bro_message" => "%{HTTP}" }
      }
      mutate {
        replace => [ "message", "%{bro_message}" ]
        remove_field => [ "bro_message" ]
      }
    }
    if [sent_fuids] {
      if ! [fuid] {
        mutate { add_field => {"fuid" => [] } }
      }
      mutate {
        split => { "sent_fuids" => "," }
        merge => { "fuid" => "sent_fuids" }
        remove_field => [ "sent_fuids" ]
      }
    }
    if [resp_fuids] {
      if ! [fuid] {
        mutate { add_field => {"fuid" => [] } }
      }
      mutate {
        split => { "resp_fuids" => "," }
        merge => { "fuid" => "resp_fuids" }
        remove_field => [ "resp_fuids" ]
      }
    }
    if [sent_mime_types] {
      if ! [mime_type] {
        mutate { add_field => {"mime_type" => [] } }
      }
      mutate {
        split => { "sent_mime_types" => "," }
        merge => { "mime_type" => "sent_mime_types" }
        remove_field => [ "sent_mime_types" ]
      }
    }
    if [resp_mime_types] {
      if ! [mime_type] {
        mutate { add_field => {"mime_type" => [] } }
      }
      mutate {
        split => { "resp_mime_types" => "," }
        merge => { "mime_type" => "resp_mime_types" }
        remove_field => [ "resp_mime_types" ]
      }
    }
    if [sent_file_name] {
      if ! [file_name] {
        mutate { add_field => {"file_name" => [] } }
      }
      mutate { lowercase => [ "sent_file_name" ] }
      mutate {
        split => { "sent_file_name" => "," }
        merge => { "file_name" => "sent_file_name" }
        remove_field => [ "sent_file_name" ]
      }
    }
    if [resp_file_name] {
      if ! [file_name] {
        mutate { add_field => {"file_name" => [] } }
      }
      mutate { lowercase => [ "resp_file_name" ] }
      mutate {
        split => { "resp_file_name" => "," }
        merge => { "file_name" => "resp_file_name" }
        remove_field => [ "resp_file_name" ]
      }
    }
    if [referer] and [referer] != '-' {
      grok {
        match => { "referer" => "%{URIPROTO:ref_uri_proto}://(?:%{USER:ref_uname}(?::[^@]*)?@)?(?:%{URIHOST:ref_domain})?(?:%{URIPATHPARAM:ref_params})?" }
        tag_on_failure => ["uriparsefailure"]
      }
    }
    if [http_uri] {
      ruby {
        code => "
          path = event.get('http_uri')
          if path.include? '?'
            query = path.split('?', 2)[-1]
            path = path.split('?', 2)[0]
            event.set('query', query.downcase)
          end
          event.set('path', path.downcase)
        "
      }
      mutate { remove_field => [ "http_uri" ] }
    }

    if [query]{
      mutate {
        lowercase => [ "query" ]
      }
      kv {
        prefix => "get_params_"
        source => "query"
        field_split => "&"
        trim_key => "."
        remove_char_key => "."
      }
    }

    if [http_proxied] {
      kv {
        source => "http_proxied"
        prefix => "http_proxied_"
        field_split => ","
        value_split => ">"
        allow_duplicate_values => false
        include_keys => [ "VIA-", "FORWARDED-", "X-FORWARDED-FOR-"]
        trim_value => "\s+"
        trim_key => "\s+"
      }
      if [http_proxied_VIA-]{
        mutate { rename => { "http_proxied_VIA-" => "http_proxied_via" } }
      }
      if [http_proxied_FORWARDED-]{
        mutate {
          rename => { "http_proxied_FORWARDED-" => "http_proxied_forwarded" }
        }
      }
      if [http_proxied_X-FORWARDED-FOR-]{
        mutate {
          rename => {
            "http_proxied_X-FORWARDED-FOR-" => "http_proxied_x_forwarded_for"
          }
        }
      }
      mutate { remove_field => [ "http_proxied" ] }
    }

    mutate {
      convert => { "dst_port" => "integer" }
      convert => { "src_port" => "integer" }
      convert => { "bytes_sent" => "integer" }
      convert => { "bytes_received" => "integer" }
      convert => { "http_resp_code" => "integer" }
      convert => { "transport_depth" => "integer" }
    }
    if [cuid] { mutate { split => { "cuid" => "," } } }
    if [bro_ts] {
      date {
        match => [ "bro_ts", "UNIX"]
        timezone => "UTC"
      }
      mutate { remove_field => [ "bro_ts" ] }
    }

  }
}
