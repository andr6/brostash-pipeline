filter {
  if ![ips] and ([src_ip] or [dst_ip] or [file_src_ip] or [file_dst_ip] or [cert_san_ip]) {
    mutate {
      add_field => { "ips" => [] }
      merge => { "ips" => "src_ip" }
    }
    mutate {
      merge => { "ips" => "dst_ip" }
    }

    if [domain_ips] {
      ruby {
        code => "
          ips = event.get('ips')
          d_ips = event.get('domain_ips')
          ll = d_ips.length
          (1..ll).each do |i|
            x = d_ips[i-1].strip
            if !ips.include?(x)
              ips.push(x)
            end
          end
          event.set('ips', ips)
        "
      }
    }
    if [file_src_ip] {
      ruby {
        code => "
          ips = event.get('ips')
          d_ips = event.get('file_src_ip')
          ll = d_ips.length
          (1..ll).each do |i|
            x = d_ips[i-1].strip
            if !ips.include?(x)
              ips.push(x)
            end
          end
          event.set('ips', ips)
        "
      }
    }
    if [file_dst_ip] {
      ruby {
        code => "
          ips = event.get('ips')
          d_ips = event.get('file_dst_ip')
          ll = d_ips.length
          (1..ll).each do |i|
            x = d_ips[i-1].strip
            if !ips.include?(x)
              ips.push(x)
            end
          end
          event.set('ips', ips)
        "
      }
    }

    if [cert_san_ip] {
      ruby {
        init => "require 'resolv'"
        code => "
          ips = event.get('ips')
          d_ips = event.get('cert_san_ip')
          ll = d_ips.length
          (1..ll).each do |i|
            x = d_ips[i-1].strip
            case x
            when Resolv::IPv4::Regex
              if !ips.include?(x)
                ips.push(x)
              end
            when Resolv::IPv6::Regex
              if !ips.include?(x)
                ips.push(x)
              end
            end
          end
          event.set('ips', ips)
        "
      }
    }
  }

  if ![emails] and [cert_san_email] {

    mutate {
      add_field => { "emails" => [] }
    }

    if [cert_san_email] {
      ruby {
        code => "
          ems = event.get('emails')
          to = event.get('cert_san_email')
          ll = to.length
          (1..ll).each do |i|
            x = to[i-1].strip
            if !ems.include?(x)
              ems.push(x)
            end
          end
          event.set('emails', ems)
        "
      }
    }
  }


  if ![domains] and ([domain] or [ref_domain] or [cert_subject_cn_domain] or [cert_san_dns] or [emails]) {
    mutate {
      add_field => { "domains" => [] }
      merge => { "domains" => "domain" }
    }
    if [ref_domain] and ([ref_domain] not in [domains]) {
      mutate {
        merge => { "domains" => "ref_domain" }
      }
    }
    if [cert_subject_cn_domain] and ([cert_subject_cn_domain] not in [domains]) {
      mutate {
        merge => { "domains" => "cert_subject_cn_domain" }
      }
    }
    if [cert_san_dns] {
      ruby {
        code => "
          dns = event.get('domains')
          cdns = event.get('cert_san_dns')
          ll = cdns.length
          (1..ll).each do |i|
            d = cdns[i-1].strip.downcase
            temp_list = d.split('.')
            d_levels = temp_list.length
            d_isvalid = true
            d_isvalid = false if d_levels < 2
            if d_isvalid
              d_name = d
              if temp_list[0] == '*'
                d_name = temp_list[1..d_levels].join('.')
              end
              if !dns.include?(d_name)
                dns.push(d_name)
              end
            end
          end
          event.set('domains', dns)
        "
      }
    }
    if [emails] {
      ruby {
        code => "
          dns = event.get('domains')
          ems = event.get('emails')
          ll = ems.length
          (1..ll).each do |i|
            x_l = ems[i-1].strip.split('@')
            if x_l.length == 2
              x = x_l[-1].downcase
              if x.split('.').length > 1 and !dns.include?(x)
                dns.push(x)
              end
            end
          end
          event.set('domains', dns)
        "
      }
    }
  }
}
