filter {
  if [logtype] == "brodns" {
    grok {
      patterns_dir => ["/etc/logstash/patterns"]
      match => { "message" => "%{LOG_HEADER}" }
    }
    if [bro_message] {
      grok {
        patterns_dir => ["/etc/logstash/patterns"]
        match => { "bro_message" => "%{DNS}" }
      }
      mutate {
        replace => [ "message", "%{bro_message}" ]
        remove_field => [ "bro_message" ]
      }
    }
    if [dns_answers_ttls] {
      mutate { split => { "dns_answers_ttls" => "," } }
      mutate { convert => { "dns_answers_ttls" => "integer" } }
    }
    if [dns_answers] {
     	mutate { split => { "dns_answers" => "," } }
      ruby {
        init => "require 'resolv'"
        code => "
          aa_list = event.get('dns_answers')
          ll = aa_list.length
          d_ips = []
          (1..ll).each do |i|
            vv = aa_list[i-1]
            if vv =~ Resolv::IPv4::Regex || vv =~ Resolv::IPv6::Regex
              d_ips.push(vv)
            end
          end
          if d_ips.length > 0
            event.set('domain_ips', d_ips)
            event.set('domain_ips_len', d_ips.length)
          end
        "
      }
    }
    mutate {
      convert => { "dst_port" => "integer" }
      convert => { "src_port" => "integer" }
      convert => { "domain_ips_len" => "integer" }
    }
    if [cuid] { mutate { split => { "cuid" => "," } } }
    if [bro_ts] {
      date {
        match => [ "bro_ts", "UNIX"]
        timezone => "UTC"
      }
      mutate { remove_field => [ "bro_ts" ] }
    }
  }
}
